// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by ./generator. DO NOT EDIT.
package dynrpcserver

import (
	"context"
	"sync"

	"github.com/hashicorp/terraform/internal/rpcapi/rawrpc/rawdependencies1"
)

type Dependencies struct {
	impl rawdependencies1.DependenciesServer
	mu   sync.RWMutex
}

var _ rawdependencies1.DependenciesServer = (*Dependencies)(nil)

func NewDependenciesStub() *Dependencies {
	return &Dependencies{}
}

func (s *Dependencies) BuildProviderPluginCache(a0 *rawdependencies1.BuildProviderPluginCache_Request, a1 rawdependencies1.Dependencies_BuildProviderPluginCacheServer) error {
	impl, err := s.realRPCServer()
	if err != nil {
		return err
	}
	return impl.BuildProviderPluginCache(a0, a1)
}

func (s *Dependencies) CloseDependencyLocks(a0 context.Context, a1 *rawdependencies1.CloseDependencyLocks_Request) (*rawdependencies1.CloseDependencyLocks_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.CloseDependencyLocks(a0, a1)
}

func (s *Dependencies) CloseProviderPluginCache(a0 context.Context, a1 *rawdependencies1.CloseProviderPluginCache_Request) (*rawdependencies1.CloseProviderPluginCache_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.CloseProviderPluginCache(a0, a1)
}

func (s *Dependencies) CloseSourceBundle(a0 context.Context, a1 *rawdependencies1.CloseSourceBundle_Request) (*rawdependencies1.CloseSourceBundle_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.CloseSourceBundle(a0, a1)
}

func (s *Dependencies) CreateDependencyLocks(a0 context.Context, a1 *rawdependencies1.CreateDependencyLocks_Request) (*rawdependencies1.CreateDependencyLocks_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.CreateDependencyLocks(a0, a1)
}

func (s *Dependencies) GetBuiltInProviders(a0 context.Context, a1 *rawdependencies1.GetBuiltInProviders_Request) (*rawdependencies1.GetBuiltInProviders_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.GetBuiltInProviders(a0, a1)
}

func (s *Dependencies) GetCachedProviders(a0 context.Context, a1 *rawdependencies1.GetCachedProviders_Request) (*rawdependencies1.GetCachedProviders_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.GetCachedProviders(a0, a1)
}

func (s *Dependencies) GetLockedProviderDependencies(a0 context.Context, a1 *rawdependencies1.GetLockedProviderDependencies_Request) (*rawdependencies1.GetLockedProviderDependencies_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.GetLockedProviderDependencies(a0, a1)
}

func (s *Dependencies) GetProviderSchema(a0 context.Context, a1 *rawdependencies1.GetProviderSchema_Request) (*rawdependencies1.GetProviderSchema_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.GetProviderSchema(a0, a1)
}

func (s *Dependencies) OpenDependencyLockFile(a0 context.Context, a1 *rawdependencies1.OpenDependencyLockFile_Request) (*rawdependencies1.OpenDependencyLockFile_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.OpenDependencyLockFile(a0, a1)
}

func (s *Dependencies) OpenProviderPluginCache(a0 context.Context, a1 *rawdependencies1.OpenProviderPluginCache_Request) (*rawdependencies1.OpenProviderPluginCache_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.OpenProviderPluginCache(a0, a1)
}

func (s *Dependencies) OpenSourceBundle(a0 context.Context, a1 *rawdependencies1.OpenSourceBundle_Request) (*rawdependencies1.OpenSourceBundle_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.OpenSourceBundle(a0, a1)
}

func (s *Dependencies) ActivateRPCServer(impl rawdependencies1.DependenciesServer) {
	s.mu.Lock()
	s.impl = impl
	s.mu.Unlock()
}

func (s *Dependencies) realRPCServer() (rawdependencies1.DependenciesServer, error) {
	s.mu.RLock()
	impl := s.impl
	s.mu.RUnlock()
	if impl == nil {
		return nil, unavailableErr
	}
	return impl, nil
}
