// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by ./generator. DO NOT EDIT.
package dynrpcserver

import (
	"context"
	"sync"

	"github.com/hashicorp/terraform/internal/rpcapi/rawrpc/rawdependencies1"
)

type Packages struct {
	impl rawdependencies1.PackagesServer
	mu   sync.RWMutex
}

var _ rawdependencies1.PackagesServer = (*Packages)(nil)

func NewPackagesStub() *Packages {
	return &Packages{}
}

func (s *Packages) FetchModulePackage(a0 context.Context, a1 *rawdependencies1.FetchModulePackage_Request) (*rawdependencies1.FetchModulePackage_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.FetchModulePackage(a0, a1)
}

func (s *Packages) FetchProviderPackage(a0 context.Context, a1 *rawdependencies1.FetchProviderPackage_Request) (*rawdependencies1.FetchProviderPackage_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.FetchProviderPackage(a0, a1)
}

func (s *Packages) ModulePackageSourceAddr(a0 context.Context, a1 *rawdependencies1.ModulePackageSourceAddr_Request) (*rawdependencies1.ModulePackageSourceAddr_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.ModulePackageSourceAddr(a0, a1)
}

func (s *Packages) ModulePackageVersions(a0 context.Context, a1 *rawdependencies1.ModulePackageVersions_Request) (*rawdependencies1.ModulePackageVersions_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.ModulePackageVersions(a0, a1)
}

func (s *Packages) ProviderPackageVersions(a0 context.Context, a1 *rawdependencies1.ProviderPackageVersions_Request) (*rawdependencies1.ProviderPackageVersions_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.ProviderPackageVersions(a0, a1)
}

func (s *Packages) ActivateRPCServer(impl rawdependencies1.PackagesServer) {
	s.mu.Lock()
	s.impl = impl
	s.mu.Unlock()
}

func (s *Packages) realRPCServer() (rawdependencies1.PackagesServer, error) {
	s.mu.RLock()
	impl := s.impl
	s.mu.RUnlock()
	if impl == nil {
		return nil, unavailableErr
	}
	return impl, nil
}
