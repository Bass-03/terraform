// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by ./generator. DO NOT EDIT.
package dynrpcserver

import (
	"context"
	"sync"

	rawstacks1 "github.com/hashicorp/terraform/internal/rpcapi/rawrpc/rawstacks1"
)

type Stacks struct {
	impl rawstacks1.StacksServer
	mu   sync.RWMutex
}

var _ rawstacks1.StacksServer = (*Stacks)(nil)

func NewStacksStub() *Stacks {
	return &Stacks{}
}

func (s *Stacks) ApplyStackChanges(a0 *rawstacks1.ApplyStackChanges_Request, a1 rawstacks1.Stacks_ApplyStackChangesServer) error {
	impl, err := s.realRPCServer()
	if err != nil {
		return err
	}
	return impl.ApplyStackChanges(a0, a1)
}

func (s *Stacks) CloseStackConfiguration(a0 context.Context, a1 *rawstacks1.CloseStackConfiguration_Request) (*rawstacks1.CloseStackConfiguration_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.CloseStackConfiguration(a0, a1)
}

func (s *Stacks) FindStackConfigurationComponents(a0 context.Context, a1 *rawstacks1.FindStackConfigurationComponents_Request) (*rawstacks1.FindStackConfigurationComponents_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.FindStackConfigurationComponents(a0, a1)
}

func (s *Stacks) InspectExpressionResult(a0 context.Context, a1 *rawstacks1.InspectExpressionResult_Request) (*rawstacks1.InspectExpressionResult_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.InspectExpressionResult(a0, a1)
}

func (s *Stacks) OpenStackConfiguration(a0 context.Context, a1 *rawstacks1.OpenStackConfiguration_Request) (*rawstacks1.OpenStackConfiguration_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.OpenStackConfiguration(a0, a1)
}

func (s *Stacks) OpenStackInspector(a0 context.Context, a1 *rawstacks1.OpenStackInspector_Request) (*rawstacks1.OpenStackInspector_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.OpenStackInspector(a0, a1)
}

func (s *Stacks) PlanStackChanges(a0 *rawstacks1.PlanStackChanges_Request, a1 rawstacks1.Stacks_PlanStackChangesServer) error {
	impl, err := s.realRPCServer()
	if err != nil {
		return err
	}
	return impl.PlanStackChanges(a0, a1)
}

func (s *Stacks) ValidateStackConfiguration(a0 context.Context, a1 *rawstacks1.ValidateStackConfiguration_Request) (*rawstacks1.ValidateStackConfiguration_Response, error) {
	impl, err := s.realRPCServer()
	if err != nil {
		return nil, err
	}
	return impl.ValidateStackConfiguration(a0, a1)
}

func (s *Stacks) ActivateRPCServer(impl rawstacks1.StacksServer) {
	s.mu.Lock()
	s.impl = impl
	s.mu.Unlock()
}

func (s *Stacks) realRPCServer() (rawstacks1.StacksServer, error) {
	s.mu.RLock()
	impl := s.impl
	s.mu.RUnlock()
	if impl == nil {
		return nil, unavailableErr
	}
	return impl, nil
}
